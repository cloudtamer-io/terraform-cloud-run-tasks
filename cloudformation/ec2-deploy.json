{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Deploy application node for cloudtamer.io and Terraform Cloud integration.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "App Configuration"
                    },
                    "Parameters": [
                        "Namespace",
                        "AppVersion",
                        "DeployGithubRepo",
                        "AppAllowFromCIDR",
                        "AppURL",
                        "AppAPIKey",
                        "TerraformAPIKey"
                    ]
                },
                {
                    "Label": {
                        "default": "Nodes"
                    },
                    "Parameters": [
                        "InstanceType",
                        "ImageId",
                        "KeyPair"
                    ]
                },
                {
                    "Label": {
                        "default": "Networking"
                    },
                    "Parameters": [
                        "VPCId",
                        "PublicSubnet",
                        "ElasticIPID"
                    ]
                }
            ],
            "ParameterLabels": {
                "DeployGithubRepo": {
                    "default": "GitHub Repository"
                },
                "ImageId": {
                    "default": "Image ID"
                },
                "InstanceType": {
                    "default": "Instance Type"
                },
                "VPCId": {
                    "default": "VPC ID"
                },
                "KeyPair": {
                    "default": "Key Pair"
                },
                "AppAllowFromCIDR": {
                    "default": "Allow Access from CIDR"
                },
                "Namespace": {
                    "default": "Unique Namespace"
                },
                "AppURL": {
                    "default": "Application URL"
                },
                "AppAPIKey": {
                    "default": "Application API Key"
                },
                "TerraformAPIKey": {
                    "default": "Terraform API Key"
                },
                "ElasticIPID": {
                    "default": "Elastic IP ID"
                }
            }
        }
    },
    "Parameters": {
        "AppVersion": {
            "Type": "String",
            "Description": "Version of app to install. You must increment this to upgrade.",
            "Default": "1.0"
        },
        "DeployGithubRepo": {
            "Type": "String",
            "Default": "https://github.com/cloudtamer-io/terraform-cloud-run-tasks/zipball/cft-deploy/",
            "Description": "GitHub repository where the code is stored. Should end with: /zipball/BRANCH/",
            "MinLength": "1"
        },
        "ImageId": {
            "Type": "String",
            "Default": "ami-087c17d1fe0178315",
            "Description": "Image used for the nodes.",
            "MinLength": "1"
        },
        "InstanceType": {
            "Type": "String",
            "Default": "t3.micro",
            "Description": "EC2 instance type.",
            "MinLength": "1"
        },
        "VPCId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "VPC for the application.",
            "MinLength": "1"
        },
        "PublicSubnet": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Subnet for the node.",
            "MinLength": "1"
        },
        "KeyPair": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Key pair to access the EC2 instances.",
            "MinLength": "1"
        },
        "AppAllowFromCIDR": {
            "Description": "IP address range for application access. Add additional ranges on security group manually.",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "Namespace": {
            "Description": "Unique namespace for the application in this AWS account.",
            "Type": "String",
            "Default": "tftask",
            "MinLength": "1"
        },
        "AppURL": {
            "Description": "URL to the cloudtamer.io application: https://cloudtamer.example.com",
            "Type": "String",
            "MinLength": "1"
        },
        "AppAPIKey": {
            "Description": "cloudtamer.io API key: app_1_XXXXXXXXXXXXXX",
            "Type": "String",
            "MinLength": "1",
            "NoEcho": "true"
        },
        "TerraformAPIKey": {
            "Description": "Terraform workspace API key.",
            "Type": "String",
            "MinLength": "1",
            "NoEcho": "true"
        },
        "ElasticIPID": {
            "Type": "String",
            "Description": "Elastic IP to attach to the node: eipalloc-xxxxxxxxxxxxx",
            "MinLength": "1"
        }
    },
    "Outputs": {
        "Version": {
            "Description": "Current version of the application.",
            "Value": {
                "Ref": "AppVersion"
            }
        }
    },
    "Resources": {
        "UserSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPCId"
                },
                "GroupDescription": "Allows inbound http traffic.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "AppAllowFromCIDR"
                        },
                        "FromPort": 80,
                        "IpProtocol": "tcp",
                        "ToPort": 80
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "Namespace"
                                    },
                                    "-user"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "EC2Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile"
                },
                "ImageId": {
                    "Ref": "ImageId"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPair"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "UserSG"
                    }
                ],
                "SubnetId": {
                    "Ref": "PublicSubnet"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "Namespace"
                                    },
                                    "-node"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum install -y aws-cfn-bootstrap\n",
                                "# Install the files and packages from the metadata\n",
                                "/opt/aws/bin/cfn-init ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource EC2Instance ",
                                "         --configsets InstallAndRun ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "# Signal the status from cfn-init\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource EC2Instance ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT5M"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "InstallAndRun": [
                            "Install",
                            "Configure"
                        ]
                    },
                    "Install": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            "interval=1\n",
                                            "verbose=true\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init ",
                                            "         --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource EC2Instance ",
                                            "         --configsets InstallAndRun ",
                                            "         --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/opt/boot.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/sh\n",
                                            "kill $(ps aux | grep '[w]ebgui' | awk '{print $2}')\n",
                                            "sudo service webservice stop\n",
                                            "rm -R /opt/webservice\n",
                                            "mkdir -p /opt/webservice\n",
                                            "chmod 777 /opt/webservice -R\n",
                                            "cd /opt/webservice\n",
                                            "curl -O https://storage.googleapis.com/golang/go1.16.8.linux-amd64.tar.gz\n",
                                            "tar -xvf go*.tar.gz\n",
                                            "sudo mv go /usr/local\n",
                                            "rm go1*\n",
                                            "export PATH=$PATH:/usr/local/go/bin\n",
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "echo Loading version: ",
                                                        {
                                                            "Ref": "AppVersion"
                                                        },
                                                        "\n"
                                                    ]
                                                ]
                                            },
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "curl -L ",
                                                        {
                                                            "Ref": "DeployGithubRepo"
                                                        },
                                                        " -o code.zip",
                                                        "\n"
                                                    ]
                                                ]
                                            },
                                            "unzip code.zip\n",
                                            "cd cloudtamer-io-terraform-cloud-run-tasks*\n",
                                            "go build -o webgui\n",
                                            "mv webgui ../\n",
                                            "cd ..\n",
                                            "rm -R cloudtamer-io-terraform-cloud-run-tasks*\n",
                                            "rm code.zip\n",
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "chmod +x webgui",
                                                        "\n"
                                                    ]
                                                ]
                                            },
                                            "sudo service webservice start\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/init.d/webservice": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/sh\n",
                                            "### BEGIN INIT INFO\n",
                                            "# Provides:\n",
                                            "# Required-Start:    $remote_fs $syslog\n",
                                            "# Required-Stop:     $remote_fs $syslog\n",
                                            "# Default-Start:     2 3 4 5\n",
                                            "# Default-Stop:      0 1 6\n",
                                            "# Short-Description: Start daemon at boot time\n",
                                            "# Description:       Enable service provided by daemon.\n",
                                            "### END INIT INFO\n",
                                            "\n",
                                            "dir=\"/opt/webservice\"\n",
                                            "cmd=\"./webgui\"\n",
                                            "user=\"root\"\n",
                                            "\n",
                                            "name=`basename $0`\n",
                                            "pid_file=\"/var/run/$name.pid\"\n",
                                            "stdout_log=\"/var/log/$name.log\"\n",
                                            "stderr_log=\"/var/log/$name.err\"\n",
                                            "\n",
                                            "get_pid() {\n",
                                            "    cat \"$pid_file\"\n",
                                            "}\n",
                                            "\n",
                                            "is_running() {\n",
                                            "    [ -f \"$pid_file\" ] && ps -p `get_pid` > /dev/null 2>&1\n",
                                            "}\n",
                                            "\n",
                                            "case \"$1\" in\n",
                                            "    start)\n",
                                            "    if is_running; then\n",
                                            "        echo \"Already started\"\n",
                                            "    else\n",
                                            "        echo \"Starting $name\"\n",
                                            "        cd \"$dir\"\n",
                                            "        if [ -z \"$user\" ]; then\n",
                                            "            sudo ",
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "CLOUDTAMERIO_URL=",
                                                        {
                                                            "Ref": "AppURL"
                                                        },
                                                        " CLOUDTAMERIO_APIKEY=",
                                                        {
                                                            "Ref": "AppAPIKey"
                                                        },
                                                        " TERRAFORM_APIKEY=",
                                                        {
                                                            "Ref": "TerraformAPIKey"
                                                        }
                                                    ]
                                                ]
                                            },
                                            " $cmd 80 >> \"$stdout_log\" 2>> \"$stderr_log\" &\n",
                                            "        else\n",
                                            "            sudo -u \"$user\" ",
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "CLOUDTAMERIO_URL=",
                                                        {
                                                            "Ref": "AppURL"
                                                        },
                                                        " CLOUDTAMERIO_APIKEY=",
                                                        {
                                                            "Ref": "AppAPIKey"
                                                        },
                                                        " TERRAFORM_APIKEY=",
                                                        {
                                                            "Ref": "TerraformAPIKey"
                                                        }
                                                    ]
                                                ]
                                            },
                                            " $cmd 80 >> \"$stdout_log\" 2>> \"$stderr_log\" &\n",
                                            "        fi\n",
                                            "        echo $! > \"$pid_file\"\n",
                                            "        if ! is_running; then\n",
                                            "            echo \"Unable to start, see $stdout_log and $stderr_log\"\n",
                                            "            exit 1\n",
                                            "        fi\n",
                                            "    fi\n",
                                            "    ;;\n",
                                            "    stop)\n",
                                            "    if is_running; then\n",
                                            "        echo -n \"Stopping $name..\"\n",
                                            "        kill `get_pid`\n",
                                            "        for i in 1 2 3 4 5 6 7 8 9 10\n",
                                            "        # for i in `seq 10`\n",
                                            "        do\n",
                                            "            if ! is_running; then\n",
                                            "                break\n",
                                            "            fi\n",
                                            "\n",
                                            "            echo -n \".\"\n",
                                            "            sleep 1\n",
                                            "        done\n",
                                            "        echo\n",
                                            "\n",
                                            "        if is_running; then\n",
                                            "            echo \"Not stopped; may still be shutting down or shutdown may have failed\"\n",
                                            "            exit 1\n",
                                            "        else\n",
                                            "            echo \"Stopped\"\n",
                                            "            if [ -f \"$pid_file\" ]; then\n",
                                            "                rm \"$pid_file\"\n",
                                            "            fi\n",
                                            "        fi\n",
                                            "    else\n",
                                            "        echo \"Not running\"\n",
                                            "    fi\n",
                                            "    ;;\n",
                                            "    restart)\n",
                                            "    $0 stop\n",
                                            "    if is_running; then\n",
                                            "        echo \"Unable to stop, will not attempt to start\"\n",
                                            "        exit 1\n",
                                            "    fi\n",
                                            "    $0 start\n",
                                            "    ;;\n",
                                            "    status)\n",
                                            "    if is_running; then\n",
                                            "        echo \"Running\"\n",
                                            "    else\n",
                                            "        echo \"Stopped\"\n",
                                            "        exit 1\n",
                                            "    fi\n",
                                            "    ;;\n",
                                            "    *)\n",
                                            "    echo \"Usage: $0 {start|stop|restart|status}\"\n",
                                            "    exit 1\n",
                                            "    ;;\n",
                                            "esac\n",
                                            "\n",
                                            "exit \n"
                                        ]
                                    ]
                                },
                                "mode": "000766",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "Configure": {
                        "commands": {
                            "01_start_webserver": {
                                "cwd": "/opt",
                                "command": "sudo bash ./boot.sh",
                                "waitAfterCompletion": 0,
                                "ignoreErrors": true
                            }
                        }
                    }
                }
            }
        },
        "InstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "ec2",
                                                {
                                                    "Ref": "AWS::URLSuffix"
                                                }
                                            ]
                                        ]
                                    }
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            ":",
                            [
                                "arn",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                "iam::aws:policy/service-role/AmazonEC2RoleforSSM"
                            ]
                        ]
                    }
                ],
                "Policies": [
                    {
                        "PolicyName": "ApplicationPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "RequiredForApp",
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*",
                                        "sts:AssumeRole"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "InstanceRole"
                    }
                ]
            }
        },
        "ElasticIP": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "AllocationId": {
                    "Ref": "ElasticIPID"
                },
                "InstanceId": {
                    "Ref": "EC2Instance"
                }
            }
        }
    }
}